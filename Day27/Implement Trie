struct Node{
    Node* arr[26];
    bool flag = false;

    bool containsKey(char ch){
        return arr[ch-'a'] != NULL;
    }

    void insertKey(char ch){
        arr[ch-'a'] = new Node();
    }

    Node *getNext(char ch){
        return arr[ch-'a'];
    }

    void end(){
        flag = true;
    }

    bool isEnd(){
        return flag;
    }

};
class Trie {
private:Node *root = NULL;
public:
    Trie() {
        root = new Node();
    }
    
    void insert(string word) {
        Node *temp = root;
        for(int i=0;i<word.size();i++){
            if(!temp->containsKey(word[i])){
                temp->insertKey(word[i]);
            }
            temp = temp->getNext(word[i]);
        }
        temp->end();
    }
    
    bool search(string word) {
        Node *temp = root;
        for(int i=0;i<word.size();i++){
            if(!temp->containsKey(word[i])){
                return false;
            }
            temp = temp->getNext(word[i]);
        }
        return temp->isEnd();
    }
    
    bool startsWith(string prefix) {
        Node *temp = root;
        for(int i=0;i<prefix.size();i++){
            if(!temp->containsKey(prefix[i])){
                return false;
            }
            temp = temp->getNext(prefix[i]);
        }
        return true;
    }
};
