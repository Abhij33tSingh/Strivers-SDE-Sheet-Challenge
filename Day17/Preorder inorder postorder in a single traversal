vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    if(!root){
        return {};
    }
    stack<pair<BinaryTreeNode<int>* , int>> st;
    vector<int> inOrder;
    vector<int> preOrder;
    vector<int> postOrder;
    st.push({root, 1});
    while(!st.empty()){
        auto temp = st.top();
        st.pop();
        
        if(temp.second == 1){
            preOrder.push_back(temp.first->data);
            temp.second++;
            st.push(temp);
            if(temp.first->left){
                st.push({temp.first->left, 1});
            }
        }else if(temp.second == 2){
            inOrder.push_back(temp.first->data);
            temp.second++;
            st.push(temp);
            if(temp.first->right){
                st.push({temp.first->right, 1});
            }
        }else{
            postOrder.push_back(temp.first->data);
        }
    }
    return {inOrder, preOrder, postOrder};
}
