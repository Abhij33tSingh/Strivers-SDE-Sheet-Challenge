class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root){
            return 0;
        }
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        int ans = 1;
        while(!q.empty()){
            int size = q.size();
            int mmin = q.front().second;
            int leftMost, rightMost;
            for(int i=0;i<size;i++){
                long long currid = q.front().second - mmin;
                TreeNode* curr = q.front().first;
                q.pop();
                if(i==0){
                    leftMost = currid;
                }
                if(i==size-1){
                    rightMost = currid;
                }
                if(curr->left){
                    q.push({curr->left, 2*currid+1});
                }
                if(curr->right){
                    q.push({curr->right, 2*currid+2});
                }
            }
            ans = max(ans, rightMost-leftMost+1);
        }
        return ans;
    }
};
