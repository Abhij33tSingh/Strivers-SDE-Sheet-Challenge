class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int fn(int W, int wt[], int val[], int n, vector<vector<int>> &dp){
        if(W==0 || n==0){
           return 0;
       }
       if(dp[W][n] != -1){
           return dp[W][n];
       }
       if(wt[n-1] <= W){
           return dp[W][n] = max(val[n-1] + fn(W-wt[n-1], wt, val, n-1, dp), fn(W, wt, val, n-1, dp));
       }
       return dp[W][n] = fn(W, wt, val, n-1, dp);
    }
    int knapSack(int W, int wt[], int val[], int n){ 
    vector<vector<int>> dp(W+1, vector<int> (n+1, -1));
       return fn(W, wt, val, n, dp);
    }
};
