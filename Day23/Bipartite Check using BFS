class Solution {
public:
    bool BFS(vector<vector<int>> &graph, vector<int> colors, int start){
        queue<int> q;
        q.push(start);
        colors[start] = 1;
        while(!q.empty()){
            int u = q.front();
            q.pop();

            for(int v:graph[u]){
                if(colors[v]==0){
                    if(colors[u]==1){
                        colors[v] = 2;
                        q.push(v);
                    }else if(colors[u]==2){
                        colors[v] = 1;
                        q.push(v);
                    }
                }else if(colors[v]==colors[u]){
                    return false;
                }
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> colors(graph.size(), 0);

        for(int i=0;i<graph.size();i++){
            if(colors[i]==0){
                if(BFS(graph, colors, i)==false){
                    return false;
                }
            }
        }
        return true;
    }
};
