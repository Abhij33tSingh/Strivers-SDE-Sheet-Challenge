class Solution {
public:
    bool midIsEven(int &mid){
        return mid % 2 == 0;
    }
    bool firstCopyAtMid(int  &mid, vector<int> &nums){
        if(mid==nums.size()-1){
            return false;
        }
        if(nums[mid+1] == nums[mid]){
            return true;
        }
        return false;
    }
    int singleNonDuplicate(vector<int>& nums) {
        if(nums.size() == 1){
            return nums[0];
        }

        int low = 0, high = nums.size() - 1;
        while(low <= high){
            int mid = (low + high) / 2;

            if(mid==0 && nums[mid+1] != nums[mid]){
                return nums[mid];
            }else if(mid==nums.size()-1 && nums[mid-1] != nums[mid]){
                return nums[mid];
            }else if(nums[mid+1] != nums[mid] && nums[mid-1] != nums[mid]){
                return nums[mid];
            }

            if(midIsEven(mid)){
                if(firstCopyAtMid(mid, nums)){
                    low = mid + 1;
                }else{
                    high = mid - 1;
                }
            }else{
                if(firstCopyAtMid(mid, nums)){
                    high = mid - 1;
                }else{
                    low = mid + 1;
                }
            }
        }
        return -1;
    }
};
